import yaml
from keras.models import model_from_yaml
import numpy as np
import cv2

def load_cnn_model():
    global cnn_model
    try:
        cnn_model
    except:
        print('loading cnn model......')
        with open('graph.yml', 'r') as f:
            yaml_string = yaml.load(f)
        cnn_model = model_from_yaml(yaml_string)

        print('loading weights......')
        cnn_model.load_weights('graph.h5')
        cnn_model.compile(loss='categorical_crossentropy',
                      optimizer='sgd', metrics=['accuracy'])
    return cnn_model

def draw(path):
    f = open(path)
    list = f.readlines()
    num_list = []
    for i in list:
        tuplestr_list = []
        tuple_list = []
        num = []
        temp = i.split('[')[1].split(']')[0]
        # print(temp)
        tuplestr_list = temp.split(',')
        # print(tuplestr_list)
        for m in range(0,len(tuplestr_list),2):
            o1 = 0
            o2 = 0
            o1 = int(tuplestr_list[m].split('(')[1])
            o2 = int(tuplestr_list[m + 1].split(')')[0])
            num.append((o1,o2))
        num_list.append(num)
    print(num_list[0])
    # num = [(879, 65), (879, 65), (879, 66), (874, 70), (866, 75), (855, 84), (846, 90), (835, 97), (830, 100), (825, 103), (822, 105), (820, 106), (819, 107), (818, 107), (818, 108), (818, 108), (817, 108), (817, 108), (816, 109), (816, 109), (815, 109), (814, 110), (813, 111), (812, 112), (810, 113), (809, 114), (807, 116), (805, 118), (804, 119), (801, 121), (800, 122), (797, 124), (795, 126), (793, 127), (791, 129), (788, 131), (785, 133), (782, 135), (780, 137), (776, 139), (774, 141), (770, 143), (766, 146), (762, 148), (758, 151), (756, 153), (752, 155), (749, 157), (746, 159), (744, 160), (742, 161), (740, 163), (739, 163), (737, 164), (736, 165), (734, 166), (732, 167), (729, 169), (726, 171), (723, 172), (720, 174), (717, 175), (715, 177), (713, 178), (712, 178), (710, 180), (708, 180), (706, 181), (705, 182), (703, 183), (702, 184), (700, 185), (697, 187), (695, 189), (693, 190), (691, 191), (688, 193), (685, 195), (682, 197), (679, 199), (675, 202), (672, 204), (668, 206), (666, 208), (664, 209), (661, 210), (659, 211), (656, 212), (654, 213), (651, 215), (649, 216), (646, 217), (641, 220), (637, 223), (633, 225), (629, 227), (623, 230), (618, 233), (612, 237), (607, 240), (600, 243), (596, 246), (589, 249), (585, 251), (581, 254), (576, 257), (570, 260), (566, 262), (561, 266), (556, 269), (552, 271), (548, 274), (545, 276), (541, 278), (539, 280), (536, 282), (534, 283), (530, 285), (527, 287), (524, 289), (522, 291), (519, 292), (517, 293), (515, 295), (514, 296), (511, 297), (509, 298), (507, 300), (505, 301), (504, 302), (502, 304), (499, 305), (496, 308), (493, 310), (488, 313), (483, 317), (477, 321), (472, 325), (466, 329), (461, 333), (456, 337), (452, 339), (447, 343), (443, 346), (439, 348), (435, 351), (427, 356), (419, 361), (413, 364), (405, 368), (396, 373), (391, 376), (383, 380), (379, 382), (373, 385), (368, 387), (363, 390), (358, 392), (353, 395), (349, 397), (345, 399), (343, 400), (343, 400), (343, 400), (343, 400), (343, 400), (0, 0), (369, 329), (368, 330), (367, 334), (362, 343), (358, 350), (353, 360), (349, 367), (345, 374), (342, 380), (340, 383), (337, 387), (335, 390), (333, 394), (331, 396), (329, 398), (328, 400), (327, 401), (326, 403), (326, 404), (326, 404), (326, 404), (326, 404), (326, 404), (326, 404), (326, 404), (326, 404), (326, 404), (328, 404), (334, 405), (340, 406), (349, 407), (357, 408), (363, 409), (367, 409), (371, 409), (374, 410), (380, 410), (390, 410), (396, 410), (402, 410), (406, 410), (409, 410), (409, 410), (410, 410), (410, 410), (410, 410), (410, 410), (410, 410), (410, 410), (410, 410), (410, 410), (410, 410), (410, 410), (0, 0)]
    x_max = 0
    x_min = 600
    y_max = 0
    y_min = 600
    for i in num_list[0]:
        if i[0] > x_max:
            x_max = i[0]
        if i[0] < x_min and i[0] != 0:
            x_min = i[0]
        if i[1] > y_max:
            y_max = i[1]
        if i[1] < y_min and i[1] != 0:
            y_min = i[1]
    x = x_max - x_min + 1
    y = y_max - y_min + 1
    img = np.zeros(shape=[x,y])
    print(img.shape)
    for i in num_list[0]:
        if i[0] != 0 and i[1] != 0:
            # print(i[0])
            # print(i[1])
            # print(x_min)
            # print(y_min)
            img[i[0]-x_min,i[1] - y_min] = 255
    img1 = cv2.resize(img,(200,200))
    # cv2.imshow("img1",img1)
    # cv2.waitKey()
    return img1
    # vector = cnn_model.predict(img1)
    # print("vector, ",vector)

def identify():
    cnn_model = load_cnn_model()
    data = draw('temp.txt')
    # print(data)
    # print(data.shape)
    data = data.reshape(1, 200, 200, 1).astype('float32')
    # data = data/255
    # print(data)
    vector = cnn_model.predict(data)
    print(vector)
    label = cnn_model.predict_classes(data)
    print(label)


if __name__ == '__main__':
    identify()